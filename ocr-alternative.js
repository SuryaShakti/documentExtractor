// Alternative: OCR + OpenAI for scanned documents\n// If PDFs are scanned images without extractable text\n\nimport OpenAI from 'openai';\n// For OCR, you could use:\n// - Tesseract.js: npm install tesseract.js\n// - Google Cloud Vision API\n// - AWS Textract\n// - Azure Computer Vision\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Example with Tesseract.js\nasync function extractWithOCR(documentUrl: string, columns: any[]): Promise<any[]> {\n  console.log(\"üîç Using OCR + OpenAI approach\");\n  \n  // Option 1: Convert PDF to images and OCR\n  // const Tesseract = require('tesseract.js');\n  // const { worker } = await Tesseract.createWorker();\n  // const { data: { text } } = await worker.recognize(documentUrl);\n  // await worker.terminate();\n  \n  // Option 2: Use Google Cloud Vision API\n  // const vision = require('@google-cloud/vision');\n  // const client = new vision.ImageAnnotatorClient();\n  // const [result] = await client.documentTextDetection(documentUrl);\n  // const documentText = result.fullTextAnnotation?.text || '';\n  \n  // For demo, let's use a placeholder\n  const documentText = \"[OCR extracted text would go here]\";\n  \n  const results = [];\n  \n  for (const column of columns) {\n    try {\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"Extract specific information from OCR text. The text may have some OCR errors, so be flexible in interpretation.\"\n          },\n          {\n            role: \"user\",\n            content: `OCR Text:\\n${documentText}\\n\\nExtract: ${column.prompt}\\n\\nField: ${column.name}\\n\\nReturn JSON: {\"value\": \"result\", \"confidence\": 0.95}`\n          }\n        ],\n        temperature: 0.1,\n        max_tokens: 500,\n        response_format: { type: \"json_object\" }\n      });\n\n      const response = completion.choices[0].message.content;\n      const parsedResponse = JSON.parse(response || '{\"value\":\"\",\"confidence\":0}');\n      \n      results.push({\n        columnId: column.id,\n        value: parsedResponse.value || \"\",\n        confidence: Math.min(Math.max(parsedResponse.confidence || 0, 0), 1),\n        extractedBy: {\n          method: \"ai\",\n          model: \"gpt-4o\",\n          version: \"ocr-text-1.0\",\n        },\n      });\n\n    } catch (error) {\n      console.error(`Failed to extract ${column.name}:`, error);\n      results.push({\n        columnId: column.id,\n        value: \"\",\n        confidence: 0,\n        extractedBy: {\n          method: \"ai\",\n          model: \"gpt-4o\",\n          version: \"ocr-text-1.0\",\n        },\n      });\n    }\n  }\n\n  return results;\n}\n\n// To implement OCR:\n// npm install tesseract.js\n// OR set up Google Cloud Vision API\n// OR use AWS Textract\n